#! /usr/bin/env python3
#
# Copyright (c) 2014 Joost van Zwieten
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import mdeqn
import sys
import json

def walk( tree ):

    if isinstance( tree, list ):
        return list( map( walk, tree ) )
    elif isinstance( tree, dict ):
        if tree['t'] in ( 'Para', 'BulletList', 'OrderedList', 'Plain' ):
            return { 't' : tree['t'], 'c' : walk( tree['c'] ) }
        elif tree['t'] == 'Math':
            math_type, math_data = tree['c']
            if math_type['t'] == 'DisplayMath' and math_data.startswith( 'mdeqn' ):
                parsed_math_data = mdeqn.parse( math_data.splitlines()[1:] )
                parsed_math_data = parsed_math_data.replace( '\\begin{equation}', '' ).replace( '\\end{equation}', '' )
                return { 'c' : [ math_type, parsed_math_data ], 't' : 'Math' }
            else:
                return tree
        elif tree['t'] == 'RawInline' and tree['c'][0] == 'tex' and tree['c'][1].startswith( '\\eqref' ):
            return { 't' : 'RawInline', 'c' : [ 'html', tree['c'][1] ] }
        else:
#           if tree['t'] not in ( 'Header', 'Str', 'Space', 'Emph', 'Cite' ):
#               print( 'unknown type: {}'.format( tree['t'] ), file=sys.stderr )
#               print( tree, file=sys.stderr )
            return tree
    else:
        return tree

pre_ast = json.loads( sys.stdin.read() )
post_ast = [ pre_ast[0], walk( pre_ast[1] ) ]
sys.stdout.write( json.dumps( post_ast ) )
